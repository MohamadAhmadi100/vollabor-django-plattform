from django.contrib import messagesfrom django.contrib.auth.decorators import login_requiredfrom django.db.models import managerfrom django.http import HttpResponseRedirect, JsonResponse, HttpResponsefrom django.shortcuts import render, redirectfrom ivc_website.models import NewsManagerfrom django.core.paginator import Paginatorfrom django.utils import timezonefrom blog.forms import PostForm, CategoryFormfrom blog.models import Article, Categoryfrom datetime import timedeltadef blog(request):    blog_posts = Article.objects.filter(status = 'p')    category = Category.objects.filter(status = True)    top_article = []    for post in blog_posts:        if post.is_top:            top_article.append(post)    category_list = dict()    i = 1    for cat in category:        category_list[i] = cat        i += 1    context = {        'posts': blog_posts,        'top_article':top_article,        'category': category_list,    }    return render(request, 'blog/blog.html', context)def article_filter(request):    articles = Article.objects.filter(status = 'p')    category_list = request.POST.getlist('category_list[]')    article_time = request.POST.get('date_time')    search_word = request.POST.get('search_word')    if search_word:        articles = Article.objects.filter(status = 'p', title__contains = search_word)    if category_list or article_time:        selected_article = list(articles)        if category_list:            help_list = []            for item in selected_article:                #cat = item.category.active()                cat = [category.title for category in item.category.active()]                if any(item in cat for item in category_list):                    pass                else:                    help_list.append(item)            for i in help_list:                    if i in selected_article:                        selected_article.remove(i)        if article_time:            if article_time == "Next week":                start_time = timezone.now().date()                new_time = start_time + timedelta(days=7)                delta = new_time - start_time  # as timedelta                days = [start_time + timedelta(days=i) for i in range(delta.days + 1)]                help_list = []                for item in selected_article:                    if item.date not in days:                        help_list.append(item)                for i in help_list:                    if i in selected_article:                        selected_article.remove(i)            elif article_time == "Next month":                start_time = timezone.now().date()                new_time = start_time + timedelta(days=30)                delta = new_time - start_time  # as timedelta                days = [start_time + timedelta(days=i) for i in range(delta.days + 1)]                help_list = []                for item in selected_article:                    if item.date not in days:                        help_list.append(item)                for i in help_list:                    if i in selected_article:                        selected_article.remove(i)            elif article_time == "Next two month":                start_time = timezone.now().date()                new_time = start_time + timedelta(days=60)                delta = new_time - start_time  # as timedelta                days = [start_time + timedelta(days=i) for i in range(delta.days + 1)]                help_list = []                for item in selected_article:                    if item.date not in days:                        help_list.append(item)                for i in help_list:                    if i in selected_article:                        selected_article.remove(i)            elif article_time == "Last week":                start_time = timezone.now().date()                new_time = start_time - timedelta(days=7)                delta = start_time - new_time  # as timedelta                days = [start_time - timedelta(days=i) for i in range(delta.days + 1)]                help_list = []                for item in selected_article:                    if item.date not in days:                        help_list.append(item)                for i in help_list:                    if i in selected_article:                        selected_article.remove(i)            elif article_time == "Last month":                start_time = timezone.now().date()                new_time = start_time - timedelta(days=30)                delta = start_time - new_time  # as timedelta                days = [start_time - timedelta(days=i) for i in range(delta.days + 1)]                help_list = []                for item in selected_article:                    if item.date not in days:                        help_list.append(item)                for i in help_list:                    if i in selected_article:                        selected_article.remove(i)        context = {            'posts': set(selected_article),        }    else:        context = {            'posts': articles,        }    return render(request, 'blog/article_filter.html', context)def blog_detail(request, slug):    if request.method == 'GET':        post = Article.objects.get(status = 'p',slug = slug)        post.counter =post.counter+1        post.save()        related_post = set()        category = [category for category in post.category.active()]        for cat in category:            rel_post = cat.post.published()            for item in rel_post:                related_post.add(item)        context = {            "post" : post,            "related_post":list(related_post)[:4],        }        return render(request, 'blog/blog_detail.html', context)@login_requireddef blog_manager(request):    author = NewsManager.objects.get(manager = request.user)    if NewsManager.objects.filter(manager=request.user).count() == 0:        return render(request, 'ivc_website/403.html')    articles = Article.objects.all()    paginator = Paginator(articles, 10)    current_page_number = request.GET.get('page')    page_obj = paginator.get_page(current_page_number)    context = {        'posts': page_obj,        'author': author,    }    return render(request, 'blog/blog_manager.html', context)@login_requireddef update_article(request, pk):    post = Article.objects.get(pk=pk)    if request.method == "POST":        post_form = PostForm(request.POST, request.FILES, instance=post)        if post_form.is_valid():            post_form.save()            messages.success(request, 'Post has been edited successfully!')            return redirect('blog:blog-manager-page')        else:            messages.error(request, 'An error has been occurred')            return HttpResponseRedirect(request.path_info)        elif request.method == "GET":        post_form = PostForm(instance=post)        context = {            'post_form': post_form,        }        return render(request, 'blog/article_create_update.html', context)def create_article(request):    author = NewsManager.objects.get(manager = request.user)    if request.method == "POST":        news_form = PostForm(request.POST, request.FILES)        if news_form.is_valid():            news_form.save()            return redirect('blog:blog-manager-page')        else:            print (news_form.errors)            messages.error(request, "An error has been occurred")            return redirect('blog:blog-manager-page')    elif request.method == "GET":        post_form = PostForm()        context = {        'post_form': post_form,        }        return render(request, 'blog/article_create_update.html', context)@login_requireddef create_category(request):    if request.method == "GET":        category = CategoryForm()        context = {            'category': category,        }        return render(request, 'blog/category_create_update.html', context)    elif request.method == "POST":        category = CategoryForm(request.POST)        if category.is_valid():            category.save()            return redirect('blog:blog-manager-page')        else:            print (category.errors)            messages.error(request,category.errors)            return redirect('blog:blog-manager-page')def delete_article(request, pk):    post = Article.objects.get(pk=pk)    author = NewsManager.objects.get(manager = request.user)    if request.method == 'GET':        if author.is_super_author:            context = {            "news" : post,            }            return render(request, "blog/blog_delete.html", context)        else:            raise HttpResponse("You can't see this page")    elif request.method == 'POST':        post.delete()        return redirect('blog:blog-manager-page')