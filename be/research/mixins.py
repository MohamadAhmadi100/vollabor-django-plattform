from django.http import Http404from .models import IndustryFormClient, IndustryExpertForSupervisor, IndustryReviewer, IndustryFormExpert,ResearchProjectfrom django.shortcuts import render, get_object_or_404, redirectclass FormMixins():	def form_valid(self, form):		self.obj = form.save(commit=False)		self.obj.user = self.request.user		return super().form_valid(form)class FormResendMixins():	def form_valid(self, form):		self.obj = form.save(commit=False)		self.obj.user = self.request.user		self.obj.is_new = True		self.obj.is_rejects = False		self.obj.is_expert = False		self.obj.is_supervisor = False		return super().form_valid(form)		# Clientclass SecurityClientDetail():	def dispatch(self, request, pk, *args, **kwargs):		client = get_object_or_404(IndustryFormClient, pk=pk)		if client.user == request.user:			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")						# Derectorclass SecurityDirector():	def dispatch(self, request, *args, **kwargs):		if request.user.is_superuser or request.user.researchrole.director == True :			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")# Expertclass SecurityExpert():	def dispatch(self, request, *args, **kwargs):		if request.user.is_superuser or request.user.researchrole.director == True or \		request.user.researchrole.expert == True :			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")class SecurityExpertDetail():	def dispatch(self, request, pk, *args, **kwargs):		ex = get_object_or_404(IndustryFormExpert, pk=pk)		if request.user.is_superuser or request.user.researchrole.expert == True and ex.expert == request.user or \		request.user.researchrole.director == True :			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")# Expert See Score Reviewerclass SecurityExpertSub():	def dispatch(self, request, pk, *args, **kwargs):		ex = get_object_or_404(IndustryExpertForSupervisor, pk=pk)		if request.user.is_superuser or request.user.researchrole.expert == True and ex.client_form.expert == request.user or \		request.user.researchrole.director == True :			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")# Supervisorclass SecuritySupervisor():	def dispatch(self, request, *args, **kwargs):		if request.user.is_superuser or request.user.memberprofile.position == 'Supervisor'\		or request.user.researchrole.director == True :			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")class SecuritySupervisorDetail():	def dispatch(self, request, pk, *args, **kwargs):		sup = get_object_or_404(IndustryExpertForSupervisor, pk=pk)		if request.user.is_superuser or request.user.memberprofile.position == 'Supervisor' and  sup.supervisor == request.user \		or request.user.researchrole.director == True :			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")# Reviewerclass SecurityReviewer():	def dispatch(self, request, *args, **kwargs):		if request.user.is_superuser or request.user.researchrole.reviewer == True \		or request.user.researchrole.director == True :			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")class SecurityReviewerDetail():	def dispatch(self, request, pk, *args, **kwargs):		review = get_object_or_404(IndustryReviewer, pk=pk)		if request.user.is_superuser or review.reviewer == request.user and request.user.researchrole.reviewer == True \		or request.user.researchrole.director == True :			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")class SecurityProjectResearchDetail():	def dispatch(self, request, pk, *args, **kwargs):		review = get_object_or_404(ResearchProject, pk=pk)		if request.user.is_superuser or review.reviewer == request.user and request.user.researchrole.reviewer == True \		or request.user.researchrole.director == True :			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")class SecurityProjectEdit():	def dispatch(self, request, pk, *args, **kwargs):		project = get_object_or_404(ResearchProject, pk=pk)		if request.user.is_superuser or request.user == project.main_supervisor or request.user.researchrole.director == True:			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")class SecurityManageProject():	def dispatch(self, request, pk, *args, **kwargs):		if request.user.is_superuser or request.user.researchrole.director == True:			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")class SecuritySpecialExpertCreate():	def dispatch(self, request, pk, *args, **kwargs):		special = get_object_or_404(IndustryExpertForSupervisor, pk=pk)		if (special.client_form.directo_create_project == True and request.user.researchrole.expert == True \				and special.client_form.expert == request.user) or request.user.is_superuser \		or request.user.researchrole.director == True:			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")class SecuritySpecialExpertReview():	def dispatch(self, request, pk, *args, **kwargs):		special = get_object_or_404(IndustryExpertForSupervisor, pk=pk)		if (special.client_form.directo_see_reviewer == True and request.user.researchrole.expert == True \				and special.client_form.expert == request.user) or request.user.is_superuser \		or request.user.researchrole.director == True:			return super().dispatch(request, *args, **kwargs)		else:			raise Http404("You can't see this page.")