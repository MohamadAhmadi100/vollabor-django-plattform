from django.contrib import messagesfrom django.core.paginator import Paginatorfrom django.db.models import managerfrom django.http.response import HttpResponse, JsonResponse, HttpResponseRedirectfrom django.shortcuts import redirect, renderfrom django.utils import timezonefrom cartable.models import Stafffrom django.contrib.auth.decorators import login_requiredfrom .models import ManagerList, AttendanceListfrom .utils import render_to_pdf from task_tracker.models import TaskTrackerimport re@login_requireddef total_time(request):    finished_tasks = TaskTracker.objects.filter(user=request.user)    unfinished_task_numbers = TaskTracker.objects.filter(user=request.user, status = 'Start').count()    if unfinished_task_numbers == 1:        last_task = True    else:        last_task = False    if request.method == "POST":        if 'add' in request.POST:            new_task = TaskTracker(user = request.user)            new_task.title = request.POST.get('title')            new_task.user_position = request.POST.get('position')            new_task.suggested_time = request.POST.get('suggested_time')            new_task.save()            # send to manager list            user = Staff.objects.get(user = request.user, position=new_task.user_position)            ManagerList.objects.create(manager = user.manager, task = new_task, comment = "")            messages.success(request, "Task is added successfully")            return redirect('total_time')        elif 'start' in request.POST:            if not last_task:                pk = request.POST.get('task_pk')                time = request.POST.get('start_time')                print(time)                task = TaskTracker.objects.get(user=request.user, pk = pk)                task.start_time = time                task.status = "Start"                task.save()                messages.success(request, "Task start successfully")                return redirect('total_time')            else:                messages.error(request, "you have unfinished task")                return redirect('total_time')        elif 'end' in request.POST:            pk = request.POST.get('task_pk')            time = request.POST.get('end_time')            user_end = TaskTracker.objects.get(user=request.user, pk = pk)            user_end.end_time = time            user_end.has_finished = True            user_end.status = "Finished"            if request.POST.get('task') is None or request.POST.get('task').strip() == "":                messages.error(request, "You have to enter task field!")                return HttpResponseRedirect(request.path_info)  # redirect to the same page            else:                user_end.task = request.POST.get('task')            user_end.save()            messages.success(request, "Task Finished successfully")            return HttpResponseRedirect(request.path_info)  # redirect to the same page                elif 'start_pause' in request.POST:            pk = request.POST.get('task_pk_pause')            time = request.POST.get('pause_time')            user_task = TaskTracker.objects.get(user=request.user, pk = pk)            user_task.start_pause = time            user_task.save()            messages.success(request, "Task paused successfully")            return HttpResponseRedirect(request.path_info)  # redirect to the same page                elif 'end_pause' in request.POST:            pk = request.POST.get('task_pk_pause')            time = request.POST.get('pause_time')            user_task = TaskTracker.objects.get(user=request.user, pk = pk)            user_task.end_pause = time            user_task.save()            messages.success(request, "Task start again successfully")            return HttpResponseRedirect(request.path_info)  # redirect to the same page                elif 'start_day' in request.POST:            try:                today_attendace = AttendanceList.objects.get(user = request.user, date = timezone.now())            except AttendanceList.DoesNotExist:                today_attendace = None            if today_attendace != None:                messages.error(request, "you can't start anymore")                return redirect('total_time')            else:                now_time = request.POST.get('start_time')                AttendanceList.objects.create(user = request.user, start_time = now_time)                messages.success(request, "started succesfully")                return redirect('total_time')                elif 'end_day' in request.POST:            new_time = request.POST.get('end_time')            attendace = AttendanceList.objects.get(user = request.user, date = timezone.now())            attendace.end_time = new_time            attendace.save()            messages.success(request, "end succesfully")            return redirect('total_time')    elif request.method == "GET":        paginator = Paginator(finished_tasks, 7)        current_page_number = request.GET.get('page')        page_obj = paginator.get_page(current_page_number)        staff_list = Staff.objects.all()        managers = []        human_resource = []        for staff in staff_list:            managers.append(staff.manager)            if staff.section == "Human Resource section":                human_resource.append(staff.user)        try:            today_attendace = AttendanceList.objects.get(user = request.user, date = timezone.now())        except AttendanceList.DoesNotExist:            today_attendace = None        if today_attendace != None and today_attendace.end_time == None:            today_status = 1        elif today_attendace != None and today_attendace.end_time != None:            today_status = 2        elif today_attendace == None:            today_status = 3                # user staff position        user_position = Staff.objects.filter(user = request.user)        context = {            'finished_tasks': page_obj,            'unfinished_task': last_task,            'managers': managers,            'human_resource': human_resource,            'today_status': today_status,            'user_position': user_position,        }        return render(request, 'task_tracker/task_tracker.html', context)@login_requireddef delete_task(request, pk):    task = TaskTracker.objects.get(user=request.user, pk = pk)    task.delete()    messages.error(request, "Task is deleted successfully")    return redirect('manager-list')@login_requireddef confirm_task(request):    suggested_time = request.POST.get('suggested_time')    task_pk = request.POST.get('task_pk')    task = TaskTracker.objects.get(pk = task_pk)    if re.match("^[0-9][0-9]:[0-5][0-9]:[0-5][0-9]$", suggested_time):        pass    else:        messages.error(request, "invalid time number")        return redirect('manager-list')    if suggested_time != '00:00:00':        task.suggested_time = suggested_time    else:        pass    task.status = "Confirm"    task.save()    messages.success(request, "Task Confirm successfully")    return redirect('manager-list')@login_requireddef manager_list(request):    if request.method == "GET":        staff_list = Staff.objects.filter(manager = request.user)        managers = []        employee = []        for staff in staff_list:            managers.append(staff.manager)            employee.append(staff.user)        if request.user in managers:            manager_tasks = ManagerList.objects.filter(manager = request.user).order_by('-task__date','task__user__id',)            paginator = Paginator(manager_tasks, 7)            current_page_number = request.GET.get('page')            page_obj = paginator.get_page(current_page_number)            context = {                "tasks": page_obj,                "employee": employee,            }            return render(request, "task_tracker/manager_list.html", context)        else:            return HttpResponse("you has no access to this page")def manager_add_task(request):    if request.method == "POST":        title = request.POST.get('title')        user = request.POST.get('user')        suggested_time = request.POST.get('suggested_time')        staff = Staff.objects.get(user_id = int(user) , manager=request.user)        new_task = TaskTracker(user_id = int(user), title = title, user_position = staff.position, suggested_time = suggested_time, status = "Confirm")        new_task.save()        # send to manager list        ManagerList.objects.create(manager = request.user, task = new_task, comment = "")        messages.success(request, "Task is added successfully")        return redirect('manager-list')def manager_comment(request):    if request.method == "POST":        pk = request.POST.get('task')        task = TaskTracker.objects.get(pk = pk)        manager_comment = ManagerList.objects.get(manager = request.user, task = task)        manager_comment.comment = request.POST.get('comment')        manager_comment.save()        messages.success(request, "Comment added successfully")        return redirect('manager-list')@login_requireddef human_resource_list(request):    if request.method == "GET":        staff_list = Staff.objects.all()        human_resource = []        users = []        for staff in staff_list:            if staff.section == "Human Resource section" or staff.position == "CEO":                human_resource.append(staff.user)            users.append(staff.user)        if request.user in human_resource:            tasks = ManagerList.objects.all().order_by('-task__date','task__user__id',)            paginator = Paginator(tasks, 7)            current_page_number = request.GET.get('page')            page_obj = paginator.get_page(current_page_number)            context = {                "tasks":page_obj,                "users":users,            }            return render(request, "task_tracker/human_resource_list.html", context)        else:            return HttpResponse("you has no access to this page")@login_requireddef attendance_list(request):    if request.method == "GET":        attendance_list = AttendanceList.objects.all()        users = []        for user in attendance_list:            if user.end_time != None:                users.append(user)        paginator = Paginator(users, 7)        current_page_number = request.GET.get('page')        page_obj = paginator.get_page(current_page_number)        context = {            "users":page_obj,        }        return render(request, "task_tracker/attendance_list.html", context)@login_requireddef generate_pdf(request):    user = request.POST.get('user')    number = request.POST.get('task')    tasks = ManagerList.objects.filter(task__user = user)[:int(number)]    context = {        "tasks":tasks,    }    pdf = render_to_pdf('task_tracker/invoice.html', context)    return HttpResponse(pdf, content_type='application/pdf')